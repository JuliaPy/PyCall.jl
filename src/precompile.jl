# Here, we precompile functions that are passed to cfunction by __init__,
# for the reasons described in JuliaLang/julia#12256.

precompile(pyjlwrap_call, (PyPtr,PyPtr,PyPtr))
precompile(pyjlwrap_dealloc, (PyPtr,))
precompile(pyjlwrap_repr, (PyPtr,))
precompile(pyjlwrap_hash, (PyPtr,))
precompile(pyjlwrap_hash32, (PyPtr,))


# The following calls were mostly generated by running PySR
# with `--trace-compile=stderr` (see https://github.com/MilesCranmer/PySR/pull/230)

# pyjlwrap_new
precompile(Tuple{typeof(pyjlwrap_new), Nothing})
precompile(Tuple{typeof(pyjlwrap_new), Function})
precompile(Tuple{typeof(pyjlwrap_new), Array{Int64, 2}})
precompile(Tuple{typeof(pyjlwrap_new), Array{Int64, 1}})
precompile(Tuple{typeof(pyjlwrap_new), Array{Float64, 2}})
precompile(Tuple{typeof(pyjlwrap_new), Array{Float64, 1}})
precompile(Tuple{typeof(pyjlwrap_new), Array{Float32, 2}})
precompile(Tuple{typeof(pyjlwrap_new), Array{Float32, 1}})

# _pyjlwrap_call
precompile(Tuple{typeof(_pyjlwrap_call), Type, Ptr{PyObject_struct}, Ptr{PyObject_struct}})
precompile(Tuple{typeof(_pyjlwrap_call), Function, Ptr{PyObject_struct}, Ptr{PyObject_struct}})

# Conversions:
precompile(Tuple{typeof(convert), Type{Tuple{}}, PyObject})
precompile(Tuple{typeof(convert), Type{Tuple{String}}, PyObject})
precompile(Tuple{typeof(convert), Type{Tuple{Integer, Integer}}, PyObject})
precompile(Tuple{typeof(convert), Type{Tuple{Array{Float32, N} where N, Array{Float32, N} where N}}, PyObject})
precompile(Tuple{typeof(convert), Type{PyObject}, Type})
precompile(Tuple{typeof(convert), Type{PyObject}, String})
precompile(Tuple{typeof(convert), Type{PyObject}, PyObject})
precompile(Tuple{typeof(convert), Type{PyObject}, Nothing})
precompile(Tuple{typeof(convert), Type{PyObject}, Function})
precompile(Tuple{typeof(convert), Type{PyObject}, Float64})
precompile(Tuple{typeof(convert), Type{PyObject}, Dict{Function, Int64}})
precompile(Tuple{typeof(convert), Type{PyObject}, Dict{Function, Dict{K, Int64} where K}})
precompile(Tuple{typeof(convert), Type{PyObject}, Bool})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Function, 1}})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Float64, 2}})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Float64, 1}})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Float32, 2}})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Float32, 1}})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Int64, 2}})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Int64, 1}})
precompile(Tuple{typeof(convert), Type{PyObject}, Float64})
precompile(Tuple{typeof(convert), Type{PyObject}, Float32})
precompile(Tuple{typeof(convert), Type{PyObject}, Int64})
precompile(Tuple{typeof(convert), Type{PyObject}, Array{Any, 1}})
precompile(Tuple{typeof(convert), Type{Type}, PyObject})
precompile(Tuple{typeof(convert), Type{String}, PyObject})
precompile(Tuple{typeof(convert), Type{Nothing}, PyObject})
precompile(Tuple{typeof(convert), Type{Function}, PyObject})
precompile(Tuple{typeof(convert), Type{Bool}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Function, 1}}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Float32, 2}}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Float32, 1}}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Float64, 2}}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Float64, 1}}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Int64, 2}}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Int64, 1}}, PyObject})
precompile(Tuple{typeof(convert), Type{Integer}, PyObject})
precompile(Tuple{typeof(convert), Type{Float32}, PyObject})
precompile(Tuple{typeof(convert), Type{Float64}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{T, N} where N where T}, PyObject})
precompile(Tuple{typeof(convert), Type{Array{Float32, N} where N}, PyObject})

# Ref conversions:
precompile(Tuple{typeof(convert), Type{Ref{PyMethodDef}}, Base.RefValue{PyMethodDef}})
precompile(Tuple{typeof(unsafe_convert), Type{Ref{Ptr{PyObject_struct}}}, Base.RefValue{Ptr{PyObject_struct}}})
precompile(Tuple{typeof(unsafe_convert), Type{Ptr{PyObject_struct}}, Ptr{Nothing}})

# C Conversions:
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{PyObject_struct}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.cconvert), Type, Base.RefValue{PyMethodDef}})

# Arrays:
precompile(Tuple{typeof(pyocopy), PyArray{Int64, 2}})
precompile(Tuple{typeof(pyocopy), PyArray{Int64, 1}})
precompile(Tuple{typeof(pyocopy), PyArray{Float64, 2}})
precompile(Tuple{typeof(pyocopy), PyArray{Float64, 1}})
precompile(Tuple{typeof(pyocopy), PyArray{Float32, 2}})
precompile(Tuple{typeof(pyocopy), PyArray{Float32, 1}})
precompile(Tuple{typeof(py2array), Type, Array{Any, 1}, PyObject, Int64, Int64})
precompile(Tuple{Type{PyArray{Float32, 2}}, PyObject, PyArray_Info{Float32, 2}})
precompile(Tuple{Type{PyArray{Float32, 1}}, PyObject, PyArray_Info{Float32, 1}})
precompile(Tuple{Type{PyArray_Info{Float32, 2}}, Bool, Tuple{Int64, Int64}, Tuple{Int64, Int64}, Ptr{Nothing}, Bool, PyBuffer})
precompile(Tuple{Type{PyArray_Info{Float32, 1}}, Bool, Tuple{Int64}, Tuple{Int64}, Ptr{Nothing}, Bool, PyBuffer})

# Assorted:
precompile(Tuple{typeof(weakref_callback), Ptr{PyObject_struct}, Ptr{PyObject_struct}})
precompile(Tuple{typeof(unsafe_load), Ptr{Ptr{PyObject_struct}}})
precompile(Tuple{typeof(tuptype), DataType, Bool, Int64})
precompile(Tuple{typeof(pyreturn), PyObject})
precompile(Tuple{typeof(pyreturn), Module})
precompile(Tuple{typeof(pyo2ptr), Type})
precompile(Tuple{typeof(pyisinstance), PyObject, Ptr{PyObject_struct}})
precompile(Tuple{typeof(pyfunctionret), Function, Type, Type})
precompile(Tuple{typeof(pyerror), String, PyError})
precompile(Tuple{typeof(pydecref), PyObject})
precompile(Tuple{typeof(pydecref), PyBuffer})
precompile(Tuple{typeof(pyany_toany), Type})
precompile(Tuple{typeof(istuplen), Type, Bool, Int64})
precompile(Tuple{typeof(getproperty), PyError, Symbol})
precompile(Tuple{typeof(current_python)})
precompile(Tuple{typeof(_set_finalized)})
precompile(Tuple{typeof(Base._append!), Array{PyMemberDef, 1}, Base.HasLength, Tuple{PyMemberDef, PyMemberDef}})
precompile(Tuple{Type{PyDict{Symbol, PyObject, true}}, PyObject})